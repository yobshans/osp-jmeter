# --------------------------------------------------------------------------------------------------------------------------------------

  - name: Date and Time
    shell: "date +'%Y-%m-%d-%I-%M-%S'"
    register: datestr

# --------------------------------------------------------------------------------------------------------------------------------------

  - name: Check Blackbox-exporter container is installed
    shell: "sudo docker ps -f name='blackbox-exporter'"
    register: blackbox_exporter_status
    ignore_errors: yes
  - debug: var=blackbox_exporter_status.stdout_lines

  - name: Remove old Blackbox-exporter container
    shell: "sudo docker rm -f blackbox-exporter"
    when: blackbox_exporter_status.stdout.find("blackbox-exporter") != -1

  - name: Docker run Blackbox-exporter
    shell: "sudo docker run -d -p 9115:9115 --restart always --privileged=true --net=host --name blackbox-exporter prom/blackbox-exporter"
#    when: blackbox_exporter_status.stdout.find("blackbox-exporter") == -1

  - name: Waiting for Blackbox-exporter container is Up
    shell: "sudo docker ps -f name='blackbox-exporter'"
    register: blackbox_exporter_status
    until: ("Up" in blackbox_exporter_status.stdout) or ("Restarting" in  blackbox_exporter_status.stdout)
    retries: 10
    delay: 3
  - debug: var=blackbox_exporter_status.stdout_lines

  - name: Add firewall rule for Blackbox-exporter
    shell: "sudo firewall-cmd --zone=public --add-port=9115/tcp --permanent"

  - name: Reload firewall for Blackbox-exporter
    shell: "sudo firewall-cmd --reload"

#   - name: Update iptables filtering
#     shell: "sudo iptables -I INPUT -p tcp -m tcp --dport 9115 -j ACCEPT"
# #    when: blackbox_exporter_status.stdout.find("blackbox-exporter") == -1
# 
#   - name: Update iptables filtering
#     shell: "sudo iptables -I INPUT -p tcp -m state --state NEW -m tcp --dport 9115 -j ACCEPT"
# #    when: blackbox_exporter_status.stdout.find("blackbox-exporter") == -1
# 
#   - name: Save iptables filtering
#     shell: "sudo /sbin/service iptables save"
# #    when: blackbox_exporter_status.stdout.find("blackbox-exporter") == -1

# --------------------------------------------------------------------------------------------------------------------------------------

  - name: Create Prometheus configuration file
    shell: "mkdir -p {{ prometheus_conf_dir }} && touch {{ prometheus_conf_dir }}{{ prometheus_conf_file }}"

  - name: Generate Prometheus configuration Global
    shell: >
      echo -e "global:\n
      \x20scrape_interval:     15s\n 
      evaluation_interval: 15s\n 
      external_labels:\n 
      \x20\x20\x20\x20monitor: 'monitoring'\n" > {{ prometheus_conf_dir }}{{ prometheus_conf_file }}

#   - name: Generate Prometheus configuration Prometheus-Server
#     shell: >
#       echo -e "scrape_configs:\n\n
#       \x20- job_name: 'Prometheus-Server'\n\n
#       \x20\x20\x20static_configs:\n
#       \x20\x20\x20\x20\x20- targets:\n
#       \x20\x20\x20\x20\x20\x20\x20- localhost:9090\n
#       \x20\x20\x20\x20\x20\x20\x20labels:\n
#       \x20\x20\x20\x20\x20\x20\x20\x20\x20name: prometheus-server\n" >> {{ prometheus_conf_dir }}{{ prometheus_conf_file }}

  - name: Generate scrape_configs configuration
    shell: >
      echo -e "scrape_configs:\n\n" >> {{ prometheus_conf_dir }}{{ prometheus_conf_file }}

  - name: Generate Prometheus configuration Undercloud Node
    shell: >
      echo -e "\x20\x20- job_name: 'Undercloud Node'\n\n
      \x20\x20\x20static_configs:\n
      \x20\x20\x20\x20\x20- targets:\n
      \x20\x20\x20\x20\x20\x20\x20- {{ uc_node_ip.stdout }}:{{ cadvisor_port }}\n
      \x20\x20\x20\x20\x20\x20\x20labels:\n
      \x20\x20\x20\x20\x20\x20\x20\x20\x20name: undercloud\n
      \x20\x20\x20\x20\x20- targets:\n
      \x20\x20\x20\x20\x20\x20\x20- {{ uc_node_ip.stdout }}:9100\n
      \x20\x20\x20\x20\x20\x20\x20labels:\n
      \x20\x20\x20\x20\x20\x20\x20\x20\x20name: undercloud" >> {{ prometheus_conf_dir }}{{ prometheus_conf_file }}

  - name: Generate Prometheus configuration Controller Node Title
    shell: >
      echo -e "\n\x20\x20- job_name: 'Controller Nodes'\n\n
      \x20\x20\x20static_configs:" >> {{ prometheus_conf_dir }}{{ prometheus_conf_file }}

  - name: Generate Prometheus configuration Controller Nodes
    shell: >
      echo -e "\x20\x20\x20\x20\x20\x20- targets:\n
      \x20\x20\x20\x20\x20\x20\x20- {{ item.0 }}:{{ cadvisor_port }}\n
      \x20\x20\x20\x20\x20\x20\x20labels:\n
      \x20\x20\x20\x20\x20\x20\x20\x20\x20name: {{ item.1 }}\n
      \x20\x20\x20\x20\x20- targets:\n
      \x20\x20\x20\x20\x20\x20\x20- {{ item.0 }}:9100\n
      \x20\x20\x20\x20\x20\x20\x20labels:\n
      \x20\x20\x20\x20\x20\x20\x20\x20\x20name: {{ item.1 }}" >> {{ prometheus_conf_dir }}{{ prometheus_conf_file }}
#    with_items: "{{ contr_nodes.stdout_lines }}"
    with_together:
      - "{{ contr_nodes.stdout_lines }}"
      - "{{ contr_nodes_names.stdout_lines }}"

  - name: Generate Prometheus configuration Compute Node Title
    shell: >
      echo -e "\n\x20\x20- job_name: 'Compute Nodes'\n\n
      \x20\x20\x20static_configs:" >> {{ prometheus_conf_dir }}{{ prometheus_conf_file }}

  - name: Generate Prometheus configuration Compute Nodes
    shell: >
      echo -e "\x20\x20\x20\x20\x20\x20- targets:\n
      \x20\x20\x20\x20\x20\x20\x20- {{ item.0 }}:{{ cadvisor_port }}\n
      \x20\x20\x20\x20\x20\x20\x20labels:\n
      \x20\x20\x20\x20\x20\x20\x20\x20\x20name: {{ item.1 }}\n
      \x20\x20\x20\x20\x20- targets:\n
      \x20\x20\x20\x20\x20\x20\x20- {{ item.0 }}:9100\n
      \x20\x20\x20\x20\x20\x20\x20labels:\n
      \x20\x20\x20\x20\x20\x20\x20\x20\x20name: {{ item.1 }}" >> {{ prometheus_conf_dir }}{{ prometheus_conf_file }}
#    with_items: "{{ comp_nodes.stdout_lines }}"
    with_together:
      - "{{ comp_nodes.stdout_lines }}"
      - "{{ comp_nodes_names.stdout_lines }}"

  - name: Generate Prometheus configuration Ceph Node Title
    shell: >
      echo -e "\n\x20\x20- job_name: 'Ceph Nodes'\n\n
      \x20\x20\x20static_configs:" >> {{ prometheus_conf_dir }}{{ prometheus_conf_file }}
    when: ceph_count.stdout != "0"

  - name: Generate Prometheus configuration Ceph Nodes
    shell: >
      echo -e "\x20\x20\x20\x20\x20\x20- targets:\n
      \x20\x20\x20\x20\x20\x20\x20- {{ item.0 }}:{{ cadvisor_port }}\n
      \x20\x20\x20\x20\x20\x20\x20labels:\n
      \x20\x20\x20\x20\x20\x20\x20\x20\x20name: {{ item.1 }}\n
      \x20\x20\x20\x20\x20- targets:\n
      \x20\x20\x20\x20\x20\x20\x20- {{ item.0 }}:9100\n
      \x20\x20\x20\x20\x20\x20\x20labels:\n
      \x20\x20\x20\x20\x20\x20\x20\x20\x20name: {{ item.1 }}" >> {{ prometheus_conf_dir }}{{ prometheus_conf_file }}
#    with_items: "{{ ceph_nodes.stdout_lines }}"
    with_together:
      - "{{ ceph_nodes.stdout_lines }}"
      - "{{ ceph_nodes_names.stdout_lines }}"
    when: ceph_count.stdout != "0"

  - name: Generate Prometheus configuration Instances VMs Title
    shell: >
      echo -e "\n\x20\x20- job_name: 'Instances VMs'\n\n
      \x20\x20\x20static_configs:" >> {{ prometheus_conf_dir }}{{ prometheus_conf_file }}
    when: vm_count.stdout != "0"

  - name: Generate Prometheus configuration Instances VMs 
    shell: >
      echo -e "\x20\x20\x20\x20\x20\x20- targets:\n
      \x20\x20\x20\x20\x20\x20\x20- {{ item.0 }}:{{ cadvisor_port }}\n
      \x20\x20\x20\x20\x20\x20\x20labels:\n
      \x20\x20\x20\x20\x20\x20\x20\x20\x20name: {{ item.1 }}\n
      \x20\x20\x20\x20\x20- targets:\n
      \x20\x20\x20\x20\x20\x20\x20- {{ item.0 }}:9100\n
      \x20\x20\x20\x20\x20\x20\x20labels:\n
      \x20\x20\x20\x20\x20\x20\x20\x20\x20name: {{ item.1 }}" >> {{ prometheus_conf_dir }}{{ prometheus_conf_file }}
#    with_items: "{{ vm_nodes.stdout_lines }}"
    with_together:
      - "{{ vm_nodes.stdout_lines }}"
      - "{{ vm_nodes_names.stdout_lines }}"
    when: vm_count.stdout != "0"

  - name: Generate Prometheus configuration ICMP blackbox-service
    shell: >
      echo -e "\n\x20\x20- job_name: 'ICMP blackbox-service'\n" >> {{ prometheus_conf_dir }}{{ prometheus_conf_file }}
    when: vm_count.stdout != "0"

  - name: Generate Prometheus configuration ICMP blackbox-service
    shell: >
      echo -e "\x20\x20\x20\x20scrape_interval:     10s\n 
      \x20\x20scheme: http\n 
      \x20\x20metrics_path: /probe\n 
      \x20\x20params:\n 
      \x20\x20\x20\x20module: [icmp]\n
      \x20\x20\x20static_configs:\n
      \x20\x20\x20\x20\x20- targets:\n
      \x20\x20\x20\x20\x20\x20\x20- {{ item }}\n
      \x20\x20\x20relabel_configs:\n
      \x20\x20\x20\x20\x20- source_labels: [__address__]\n
      \x20\x20\x20\x20\x20\x20\x20target_label: __param_target\n
      \x20\x20\x20\x20\x20- source_labels: [__param_target]\n
      \x20\x20\x20\x20\x20\x20\x20target_label: instance\n
      \x20\x20\x20\x20\x20- target_label: __address__\n
      \x20\x20\x20\x20\x20\x20\x20replacement: 127.0.0.1:9115\n" >> {{ prometheus_conf_dir }}{{ prometheus_conf_file }}
    with_items: "{{ vm_nodes.stdout_lines }}"
    when: vm_count.stdout != "0"

  - name: Check Prometheus container is installed
    shell: "sudo docker ps -f name='prometheus'"
    register: prometheus_status
    ignore_errors: yes
  - debug: var=prometheus_status.stdout_lines

  - name: Docker restart Prometheus container
    shell: "sudo docker restart prometheus"
    when: prometheus_status.stdout.find("prometheus") != -1

#   - name: Remove old Prometheus container
#     shell: "sudo docker rm -f prometheus"
#     when: prometheus_status.stdout.find("prometheus") != -1
# 
  - name: Docker start Prometheus container
    shell: "sudo docker run -d -p 9090:9090 --net='host' -v /etc/prometheus:/etc/prometheus --name prometheus prom/prometheus --config.file=/etc/prometheus/prometheus.yml"
    when: prometheus_status.stdout.find("prometheus") == -1

  - name: Waiting for Prometheus container is Up
    shell: "sudo docker ps -f name='prometheus'"
    register: container_status
    until: ("Up" in container_status.stdout) or ("Restarting" in  container_status.stdout)
    retries: 10
    delay: 3
  - debug: var=container_status.stdout_lines

  - name: Add firewall rule for Prometheus
    shell: "sudo firewall-cmd --zone=public --add-port=9090/tcp --permanent"
    when: prometheus_status.stdout.find("prometheus") == -1

  - name: Reload firewall for Prometheus
    shell: "sudo firewall-cmd --reload"
    when: prometheus_status.stdout.find("prometheus") == -1

  - name: Hostname
    shell: "sudo hostname"
    register: cur_hostname

  - name: Check Grafana container is installed
    shell: "sudo docker ps -f name='grafana'"
    register: grafana_status
    ignore_errors: yes
  - debug: var=grafana_status.stdout_lines

  - name: Docker restart Grafana container
    shell: "sudo docker restart grafana"
    when: grafana_status.stdout.find("grafana") != -1

  - name:  Create a persistent volume for your data in /var/lib/grafana (database and plugins)
    shell: "sudo docker volume create grafana-storage"
    when: grafana_status.stdout.find("grafana") == -1

#   - name: Remove old Grafana container
#     shell: "sudo docker rm -f grafana"
#     when: grafana_status.stdout.find("grafana") != -1

  - name: Docker run Grafana container
    shell: "sudo docker run -d -p 3000:3000 --name=grafana -v grafana-storage:/var/lib/grafana grafana/grafana"
    when: grafana_status.stdout.find("grafana") == -1

  - name: Waiting for Grafana container is Up
    shell: "sudo docker ps -f name='grafana'"
    register: grafana_status
    until: ("Up" in grafana_status.stdout) or ("Restarting" in  grafana_status.stdout)
    retries: 10
    delay: 3
  - debug: var=grafana_status.stdout_lines

  - name: Add firewall rule for Grafana
    shell: "sudo firewall-cmd --zone=public --add-port=3000/tcp --permanent"
    when: grafana_status.stdout.find("grafana") == -1

  - name: Reload firewall for Grafana
    shell: "sudo firewall-cmd --reload"
    when: grafana_status.stdout.find("grafana") == -1

  # Check that a page returns a status 200 and fail if the word AWESOME is not in the page contents.
  - uri:
      url: http://{{ cur_hostname.stdout }}:3000/api/datasources/name/Prometheus
      user: admin
      password: admin
      force_basic_auth: yes
    register: grafana_prometheus
    failed_when: false
    changed_when: false

  - name: Enable Prometheus Datasource
    uri:
      url: http://{{ cur_hostname.stdout }}:3000/api/datasources
      method: POST
      user: admin
      password: admin
      body:
        name: "Prometheus"
        type: "prometheus"
        url: "http://{{ cur_hostname.stdout }}:9090"
        access: "proxy"
        isDefault: true
      force_basic_auth: yes
#      status_code: 201
      body_format: json
    when: grafana_prometheus.status == 404 # and grafana_status.stdout.find("grafana") == -1

# --------------------------------------------------------------------------------------------------------------------------------------
# END
# --------------------------------------------------------------------------------------------------------------------------------------

